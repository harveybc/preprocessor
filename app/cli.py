import argparse

def parse_args():
    parser = argparse.ArgumentParser(description="Preprocessor for CSV data.")
    parser.add_argument('csv_file', type=str, help='Path to the input CSV file.')
    parser.add_argument('-sc', '--save_config', type=str, help='Path to save the configuration file.')
    parser.add_argument('-lc', '--load_config', type=str, help='Path to load the configuration file.')
    parser.add_argument('-p', '--plugin', type=str, help='Plugin to use for processing the data.')
    parser.add_argument('--norm_method', type=str, help='Normalization method to use.')
    parser.add_argument('--range', type=float, nargs=2, help='Normalization range.')
    parser.add_argument('-o', '--output_file', type=str, help='Path to the output CSV file.')
    parser.add_argument('-rl', '--remote_log', type=str, help='Remote logging URL.')
    parser.add_argument('-rc', '--remote_config', type=str, help='Remote configuration URL.')
    parser.add_argument('-qm', '--quiet_mode', action='store_true', help='Enable quiet mode (no console output).')
    parser.add_argument('--window_size', type=int, help='Window size for rolling calculations.')
    parser.add_argument('--ema_alpha', type=float, help='Alpha value for EMA calculations.')
    parser.add_argument('--remove_rows', type=int, nargs='+', help='Rows to remove from the dataset.')
    parser.add_argument('--remove_columns', type=int, nargs='+', help='Columns to remove from the dataset.')
    parser.add_argument('--max_lag', type=int, help='Maximum lag for feature selection methods.')
    parser.add_argument('--significance_level', type=float, help='Significance level for statistical tests.')
    parser.add_argument('--alpha', type=float, help='Alpha parameter for regularization.')
    parser.add_argument('--l1_ratio', type=float, help='L1 ratio parameter for regularization.')
    parser.add_argument('--model_type', type=str, help='Type of model to use.')
    parser.add_argument('--timesteps', type=int, help='Number of timesteps for time series models.')
    parser.add_argument('--features', type=str, nargs='+', help='List of features to use for processing.')
    parser.add_argument('--clean_method', type=str, help='Method to use for cleaning (continuity or outlier).')
    parser.add_argument('--period', type=int, help='Period in minutes for continuity cleaning.')
    parser.add_argument('--outlier_threshold', type=float, help='Threshold for outlier detection.')
    parser.add_argument('--solve_missing', action='store_true', help='Solve missing values by interpolation.')
    parser.add_argument('--delete_outliers', action='store_true', help='Delete rows with outliers.')
    parser.add_argument('--interpolate_outliers', action='store_true', help='Interpolate outliers.')
    parser.add_argument('--delete_nan', action='store_true', help='Delete rows with NaN values.')
    parser.add_argument('--interpolate_nan', action='store_true', help='Interpolate NaN values.')
    parser.add_argument('--method', type=str, help='Method to use for feature selection (acf, pacf, granger, select_single, select_multi).')
    parser.add_argument('--single', type=int, help='Single column to select.')
    parser.add_argument('--multi', type=int, nargs='+', help='Multiple columns to select.')
    parser.add_argument('--force_date', action='store_true', help='Force inclusion of the date column in the output.')
    return parser.parse_args()
